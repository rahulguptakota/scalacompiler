section .data
message db "Register = %d", 10, 0

 formatin: db "%d", 0
f TIMES 10 DW  0

section .text
	global main
extern printf
extern scanf

main:
call func_1_main
mov  eax, 1
int  0x80

func_1_fibo:
push ebp
mov ebp, esp
sub esp, 44
mov edx, 0
mov eax, 0
mov f(, %eax, 4 ), %eax
mov eax, 0
mov ebx, 1
mov f(, %ebx, 4 ), %ebx
mov ebx, 1
mov edx, 2
mov [-8 + ebp], eax
mov [-12 + ebp], ebx
mov [-4 + ebp], edx

t31:
push edx
push ecx
mov ecx, [8 + ebp]
mov edx, [-4 + ebp]
cmp edx, ecx
pop ecx
pop edx
jg t33
mov eax, [-4 + ebp]
mov f(, %eax, 4 ), %eax
mov edx, [-4 + ebp]
sub edx, 1
mov ebx, edx
mov f(, %ebx, 4 ), %ebx
mov ecx, [-4 + ebp]
sub ecx, 2
mov [-16 + ebp], edx
mov edx, ecx
mov f(, %edx, 4 ), %edx
mov [-20 + ebp], ecx
mov ecx, ebx
add ecx, edx
mov eax, ecx
mov [-36 + ebp], eax
mov [-24 + ebp], ebx
mov [-32 + ebp], ecx
mov [-28 + ebp], edx

t32:
mov edx, [-4 + ebp]
add edx, 1
mov [-4 + ebp], edx
jmp t31

t33:
mov eax, [8 + ebp]
mov f(, %eax, 4 ), %eax
mov edx, eax
push edx
mov [-44 + ebp], eax
mov [-40 + ebp], edx
mov esp, ebp
pop ebp
ret

func_1_main:
push ebp
mov ebp, esp
sub esp, 8
mov  eax, 9
push eax
call func_1_fibo
mov [-4 + ebp], eax
mov edx, [-4 + ebp]
push eax
xor eax, eax
mov eax, edx
push eax
push message
call printf
add esp, 8
pop eax
mov [-8 + ebp], edx
mov esp, ebp
pop ebp
ret
int_to_string:
add esi,9
mov byte [esi],0
mov ebx,10
.next_digit:
xor edx,edx
div ebx
add dl,'0'
dec esi
  mov [esi],dl
test eax,eax
jnz .next_digit
mov eax,esi
ret
