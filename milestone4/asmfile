section .data
message db "Register = %d", 10, 0
formatin: db "%d", 0

section .text
	global main
extern printf
extern scanf

main:
call func_1_main
mov  eax, 1
int  0x80

func_1_acker:
push ebp
mov ebp, esp
sub esp, 48
mov edx, 0
mov ecx, 0
mov ebx, 0
mov eax,0
mov [-4 + ebp], edx
mov edx,[12 + ebp]
cmp edx,eax
mov [-12 + ebp], ebx
mov [-8 + ebp], ecx
mov [12 + ebp], edx
je t9
mov edx, 0
mov [-16 + ebp], edx
jmp t10

t9:
mov edx, 1
mov [-16 + ebp], edx

t10:
mov eax,0
mov ebx,[-16 + ebp]
cmp ebx,eax
mov [-16 + ebp], ebx
je t17
mov edx, [8 + ebp]
add edx, 1
mov ecx, edx
mov [-4 + ebp], ecx
mov [-20 + ebp], edx
mov eax, [-4 + ebp]
mov esp, ebp
pop ebp
ret

t17:
mov eax,0
mov ebx,[8 + ebp]
cmp ebx,eax
mov [8 + ebp], ebx
je t20
mov edx, 0
mov [-24 + ebp], edx
jmp t21

t20:
mov edx, 1
mov [-24 + ebp], edx

t21:
mov eax,0
mov ebx,[-24 + ebp]
cmp ebx,eax
mov [-24 + ebp], ebx
je t35
mov edx, [12 + ebp]
sub edx, 1
mov ecx, edx
push ecx
mov  eax, 1
push eax
mov [-8 + ebp], ecx
mov [-28 + ebp], edx
call func_1_acker
mov edx, eax
mov [-32 + ebp], eax
mov [-4 + ebp], edx
mov eax, [-4 + ebp]
mov esp, ebp
pop ebp
ret

t35:
mov edx, [8 + ebp]
sub edx, 1
mov ecx, edx
mov  eax, [12 + ebp]
push eax
push ecx
mov [12 + ebp], eax
mov [-8 + ebp], ecx
mov [-36 + ebp], edx
call func_1_acker
mov edx, eax
mov ecx, [12 + ebp]
sub ecx, 1
mov ebx, ecx
push ebx
push edx
mov [-40 + ebp], eax
mov [-8 + ebp], ebx
mov [-44 + ebp], ecx
mov [-12 + ebp], edx
call func_1_acker
mov edx, eax
mov [-48 + ebp], eax
mov [-4 + ebp], edx
mov eax, [-4 + ebp]
mov esp, ebp
pop ebp
ret
mov esp, ebp
pop ebp
ret

func_1_main:
push ebp
mov ebp, esp
sub esp, 16
mov edx, 0
mov ecx, 0
mov ebx, 0
mov edx, 0
mov [-12 + ebp], ebx
mov [-8 + ebp], ecx
mov [-4 + ebp], edx

t84:
mov eax,3
mov ebx,[-4 + ebp]
cmp ebx,eax
mov [-4 + ebp], ebx
jg t86
mov edx, 0
mov [-8 + ebp], edx

t81:
mov eax,9
mov ebx,[-8 + ebp]
cmp ebx,eax
mov [-8 + ebp], ebx
jg t83
mov  eax, [-4 + ebp]
push eax
mov  ebx, [-8 + ebp]
push ebx
mov [-4 + ebp], eax
mov [-8 + ebp], ebx
call func_1_acker
mov edx, eax
push eax
push ebx
push ecx
push edx

xor eax, eax
mov eax, edx
push eax
push message
call printf
add esp, 8
pop edx
pop ecx
pop ebx
pop eax

mov [-16 + ebp], eax
mov [-12 + ebp], edx

t82:
mov edx, [-8 + ebp]
add edx, 1
mov [-8 + ebp], edx
jmp t81

t83:

t85:
mov edx, [-4 + ebp]
add edx, 1
mov [-4 + ebp], edx
jmp t84

t86:
mov esp, ebp
pop ebp
ret
