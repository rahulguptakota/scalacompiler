section .data
message db "Register = %d", 10, 0
formatin: db "%d", 0
formatout: db "%d ", 0
formatdouble: db "%lf", 0

<<<<<<< HEAD
str97 db 'w',0
len_str97 equ $ - str97

str96 db 'output',0
len_str96 equ $ - str96

str128 db 'r',0
len_str128 equ $ - str128

str127 db 'data.txt',0
len_str127 equ $ - str127
a TIMES 40 DW  0
=======
str17 db 'Double quote (\") is escaped',0xa
len_str17 equ $ - str17
f2 TIMES 12 DW  0
>>>>>>> 1aaf38f510f6dca91265bab76bf48dc0e8eb848d

section .text
	global main
extern printf
extern scanf
extern fopen
extern fscanf
extern fprintf
extern fclose

main:
call func_1_main
mov  eax, 1
int  0x80

func_1_partition:
push ebp
mov ebp, esp
sub esp, 132
mov edx,4
mov eax,[8 + ebp]
imul edx
mov ebx,a
add ebx,eax
mov ebx, [ebx]
mov edx, ebx
mov ecx, [12 + ebp]
sub ecx, 1
mov [-16 + ebp], edx
mov edx, ecx
mov [-24 + ebp], edx
mov edx, [12 + ebp]
mov [-28 + ebp], edx
mov edx, [8 + ebp]
sub edx, 1
mov [-32 + ebp], edx
mov edx, [-32 + ebp]
mov [-36 + ebp], edx
mov edx, [12 + ebp]
mov [-4 + ebp], eax
mov [-12 + ebp], ebx
mov [-20 + ebp], ecx
mov [-28 + ebp], edx

t54:
mov eax, [-28 + ebp]
cmp eax,[-36 + ebp]
mov [-28 + ebp], eax
jg t56
mov edx,4
mov eax,[-28 + ebp]
imul edx
mov ebx,a
add ebx,eax
mov ebx, [ebx]
cmp ebx,[-16 + ebp]
mov [-40 + ebp], eax
mov [-44 + ebp], ebx
jle t23
mov edx, 0
mov [-48 + ebp], edx
jmp t24

t23:
mov edx, 1
mov [-48 + ebp], edx

t24:
mov eax, [-48 + ebp]
cmp eax,0
mov [-48 + ebp], eax
je t53
mov edx, [-24 + ebp]
add edx, 1
mov ecx, edx
mov [-52 + ebp], edx
mov edx,4
mov eax,ecx
imul edx
mov ebx,a
add ebx,eax
mov ebx, [ebx]
mov edx, ebx
mov [-64 + ebp], edx
mov edx,4
mov [-56 + ebp], eax
mov eax,ecx
imul edx
mov edx,a
add edx,eax
mov [-72 + ebp], edx
mov edx,4
mov [-68 + ebp], eax
mov eax,[-28 + ebp]
imul edx
mov edx,a
add edx,eax
mov edx, [edx]
mov [-24 + ebp], ecx
mov ecx,[-72 + ebp]
mov [ecx],edx
mov [-80 + ebp], edx
mov edx,4
mov [-76 + ebp], eax
mov eax,[-28 + ebp]
imul edx
mov ecx,a
add ecx,eax
mov [-88 + ebp], ecx
mov ecx,[-64 + ebp]
mov edx, [-88 + ebp]
mov [edx],ecx
mov [-84 + ebp], eax
mov [-60 + ebp], ebx
mov [-88 + ebp], edx

t53:

t55:
mov edx, [-28 + ebp]
add edx, 1
mov [-28 + ebp], edx
jmp t54

t56:
mov edx, [-24 + ebp]
add edx, 1
mov [-92 + ebp], edx
mov edx,4
mov eax,[-92 + ebp]
imul edx
mov ebx,a
add ebx,eax
mov ebx, [ebx]
mov edx, ebx
mov ecx, [-24 + ebp]
add ecx, 1
mov [-36 + ebp], edx
mov edx,4
mov [-96 + ebp], eax
mov eax,ecx
imul edx
mov edx,a
add edx,eax
mov [-112 + ebp], edx
mov edx,4
mov [-108 + ebp], eax
mov eax,[8 + ebp]
imul edx
mov edx,a
add edx,eax
mov edx, [edx]
mov [-104 + ebp], ecx
mov ecx,[-112 + ebp]
mov [ecx],edx
mov [-120 + ebp], edx
mov edx,4
mov [-116 + ebp], eax
mov eax,[8 + ebp]
imul edx
mov ecx,a
add ecx,eax
mov [-128 + ebp], ecx
mov ecx,[-36 + ebp]
mov edx, [-128 + ebp]
mov [edx],ecx
mov ecx, [-24 + ebp]
add ecx, 1
mov [-128 + ebp], edx
mov edx, ecx
mov [-124 + ebp], eax
mov [-100 + ebp], ebx
mov [-132 + ebp], ecx
mov [-24 + ebp], edx
mov eax, [-24 + ebp]
mov esp, ebp
pop ebp
ret
mov esp, ebp
pop ebp
ret

func_1_quickSort:
push ebp
mov ebp, esp
sub esp, 28
mov eax, [12 + ebp]
cmp eax,[8 + ebp]
jl t86
mov edx, 0
mov [12 + ebp], eax
mov [-4 + ebp], edx
jmp t87

t86:
mov edx, 1
mov [-4 + ebp], edx

t87:
mov eax, [-4 + ebp]
cmp eax,0
mov [-4 + ebp], eax
je t112
mov  eax, [12 + ebp]
push eax
mov  ebx, [8 + ebp]
push ebx
mov [12 + ebp], eax
mov [8 + ebp], ebx
call func_1_partition
mov edx, eax
mov ecx, edx
sub ecx, 1
mov ebx, ecx
mov [-12 + ebp], edx
mov edx, [-12 + ebp]
add edx, 1
mov [-24 + ebp], edx
mov edx, [-24 + ebp]
mov [-28 + ebp], edx
mov  edx, [12 + ebp]
push edx
push ebx
mov [-8 + ebp], eax
mov [-20 + ebp], ebx
mov [-16 + ebp], ecx
mov [12 + ebp], edx
call func_1_quickSort
mov  eax, [-28 + ebp]
push eax
mov  ebx, [8 + ebp]
push ebx
mov [-28 + ebp], eax
mov [8 + ebp], ebx
call func_1_quickSort

t112:
mov esp, ebp
pop ebp
ret

func_1_print:
push ebp
mov ebp, esp
sub esp, 36
mov edx, 0
mov ecx, 0
push ebx
push ecx
push edx
xor eax, eax
mov eax, str97
push eax
xor eax, eax
mov eax, str96
push eax
call fopen
pop edx
pop ecx
pop ebx
mov ecx, eax
mov ebx, 0
mov edx, 0
mov [-12 + ebp], eax
mov [-16 + ebp], ebx
mov [-8 + ebp], ecx
mov [-4 + ebp], edx

t141:
mov eax, [-4 + ebp]
cmp eax,[8 + ebp]
mov [-4 + ebp], eax
jg t143
mov edx,4
mov eax,[-4 + ebp]
imul edx
mov ebx,a
add ebx,eax
mov ebx, [ebx]
mov edx, ebx
push edx
push formatout
mov  ecx, [-8 + ebp]
push ecx
mov [-28 + ebp], ebx
mov [-8 + ebp], ecx
mov [-16 + ebp], edx
call fprintf
mov [-32 + ebp], eax

t142:
mov edx, [-4 + ebp]
add edx, 1
mov [-4 + ebp], edx
jmp t141

t143:
mov  eax, [-8 + ebp]
push eax
call fclose
mov [-36 + ebp], eax
mov esp, ebp
pop ebp
ret

func_1_scan:
push ebp
mov ebp, esp
<<<<<<< HEAD
sub esp, 36
mov edx, 0
mov ecx, 0
mov ebx, 0
push ebx
push ecx
push edx
xor eax, eax
mov eax, str128
push eax
xor eax, eax
mov eax, str127
push eax
call fopen
=======
sub esp, 60
mov edx, 55
push eax
push ebx
push ecx
push edx
mov edx,len_str17
mov ecx,str17
mov ebx,1
mov eax,4
int 0x80
>>>>>>> 1aaf38f510f6dca91265bab76bf48dc0e8eb848d
pop edx
pop ecx
pop ebx
mov ebx, eax
mov edx, 0
mov [-16 + ebp], eax
mov [-12 + ebp], ebx
mov [-8 + ebp], ecx
mov [-4 + ebp], edx

t175:
mov eax, [-4 + ebp]
cmp eax,[8 + ebp]
mov [-4 + ebp], eax
jg t177
lea  eax, [-8 + ebp]
push eax
push formatin
mov  eax, [-12 + ebp]
push eax
<<<<<<< HEAD
call fscanf
mov edx,4
mov [-20 + ebp], eax
mov eax,[-4 + ebp]
imul edx
mov ebx,a
add ebx,eax
mov edx,[-8 + ebp]
mov ecx, ebx
mov [ecx],edx
mov [-24 + ebp], eax
mov [-32 + ebp], ecx

t176:
mov edx, [-4 + ebp]
add edx, 1
mov [-4 + ebp], edx
jmp t175

t177:
mov  eax, [-12 + ebp]
push eax
call fclose
mov [-36 + ebp], eax
mov esp, ebp
pop ebp
ret

func_1_main:
push ebp
mov ebp, esp
sub esp, 0
mov  eax, 9
push eax
call func_1_scan
mov  eax, 0
push eax
mov  ebx, 9
push ebx
call func_1_quickSort
mov  eax, 9
push eax
call func_1_print
=======
mov [-60 + ebp], edx
call func_1_t
>>>>>>> 1aaf38f510f6dca91265bab76bf48dc0e8eb848d
mov esp, ebp
pop ebp
ret
