section .data
message db "Register = %d", 10, 0
formatin: db "%d", 0
b DD 0
a TIMES 10 DW  0

section .text
	global main
extern printf
extern scanf

main:
call func_1_main
mov  eax, 1
int  0x80
mov edx, 0
mov b, edx

func_1_partition:
push ebp
mov ebp, esp
sub esp, 88
mov eax, [8 + ebp]
mov a(, %eax, 4 ), %eax
mov edx, eax
mov ecx, [12 + ebp]
sub ecx, 1
mov ebx, ecx
mov [-4 + ebp], edx
mov edx, [12 + ebp]
mov [-20 + ebp], edx
mov edx, [8 + ebp]
sub edx, 1
mov [-24 + ebp], edx
mov edx, [-24 + ebp]
mov [-28 + ebp], edx
mov edx, [12 + ebp]
mov [-8 + ebp], eax
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-20 + ebp], edx

t50:
push edx
push ecx
mov ecx, [-28 + ebp]
mov edx, [-20 + ebp]
cmp edx, ecx
pop ecx
pop edx
jg t52
mov eax, [-20 + ebp]
mov a(, %eax, 4 ), %eax
push edx
push ecx
mov ecx, [-4 + ebp]
mov edx, [-32 + ebp]
cmp edx, ecx
pop ecx
pop edx
mov [-32 + ebp], eax
jle t23
mov edx, 0
mov [-36 + ebp], edx
jmp t24

t23:
mov edx, 1
mov [-36 + ebp], edx

t24:
push edx
push ecx
mov ecx, 0
mov edx, [-36 + ebp]
cmp edx, ecx
pop ecx
pop edx
je t49
mov edx, [-16 + ebp]
add edx, 1
mov ecx, edx
mov eax, ecx
mov a(, %eax, 4 ), %eax
mov ebx, eax
mov [-40 + ebp], edx
mov edx, ecx
mov a(, %edx, 4 ), %edx
mov [-16 + ebp], ecx
mov ecx, [-20 + ebp]
mov a(, %ecx, 4 ), %ecx
mov edx, ecx
mov [-52 + ebp], edx
mov edx, [-20 + ebp]
mov a(, %edx, 4 ), %edx
mov edx, ebx
mov [-48 + ebp], eax
mov [-44 + ebp], ebx
mov [-56 + ebp], ecx
mov [-60 + ebp], edx

t49:

t51:
mov edx, [-20 + ebp]
add edx, 1
mov [-20 + ebp], edx
jmp t50

t52:
mov edx, [-16 + ebp]
add edx, 1
mov eax, edx
mov a(, %eax, 4 ), %eax
mov ecx, eax
mov ebx, [-16 + ebp]
add ebx, 1
mov [-64 + ebp], edx
mov edx, ebx
mov a(, %edx, 4 ), %edx
mov [-72 + ebp], ebx
mov ebx, [8 + ebp]
mov a(, %ebx, 4 ), %ebx
mov edx, ebx
mov [-76 + ebp], edx
mov edx, [8 + ebp]
mov a(, %edx, 4 ), %edx
mov edx, ecx
mov [-84 + ebp], edx
mov edx, [-16 + ebp]
add edx, 1
mov [-88 + ebp], edx
mov edx, [-88 + ebp]
push edx
mov [-68 + ebp], eax
mov [-80 + ebp], ebx
mov [-28 + ebp], ecx
mov [-16 + ebp], edx
mov esp, ebp
pop ebp
ret

func_1_quickSort:
push ebp
mov ebp, esp
sub esp, 20
push edx
push ecx
mov ecx, [8 + ebp]
mov edx, [12 + ebp]
cmp edx, ecx
pop ecx
pop edx
jl t78
mov edx, 0
mov [-4 + ebp], edx
jmp t79

t78:
mov edx, 1
mov [-4 + ebp], edx

t79:
push edx
push ecx
mov ecx, 0
mov edx, [-4 + ebp]
cmp edx, ecx
pop ecx
pop edx
je t100
mov  eax, [12 + ebp]
push eax
mov  ebx, [8 + ebp]
push ebx
mov [12 + ebp], eax
mov [8 + ebp], ebx
call func_1_partition
mov [-8 + ebp], eax
mov edx, [-8 + ebp]
mov  eax, [12 + ebp]
push eax
mov  ebx, [-16 + ebp]
push ebx
mov [12 + ebp], eax
mov [-16 + ebp], ebx
mov [-12 + ebp], edx
call func_1_quickSort
mov  eax, [-20 + ebp]
push eax
mov  ebx, [8 + ebp]
push ebx
mov [-20 + ebp], eax
mov [8 + ebp], ebx
call func_1_quickSort

t100:
mov esp, ebp
pop ebp
ret

func_1_print:
push ebp
mov ebp, esp
sub esp, 8
mov edx, 0
mov edx, 0
mov [-4 + ebp], edx

t112:
push edx
push ecx
mov ecx, [8 + ebp]
mov edx, [-4 + ebp]
cmp edx, ecx
pop ecx
pop edx
jg t114
mov eax, [-4 + ebp]
mov a(, %eax, 4 ), %eax
push eax
xor eax, eax
mov eax, eax
push eax
push message
call printf
add esp, 8
pop eax
mov [-8 + ebp], eax

t113:
mov edx, [-4 + ebp]
add edx, 1
mov [-4 + ebp], edx
jmp t112

t114:
mov esp, ebp
pop ebp
ret

func_1_scan:
push ebp
mov ebp, esp
sub esp, 12
mov edx, 0
mov ecx, 0
mov edx, 0
mov [-8 + ebp], ecx
mov [-4 + ebp], edx

t130:
push edx
push ecx
mov ecx, [8 + ebp]
mov edx, [-4 + ebp]
cmp edx, ecx
pop ecx
pop edx
jg t132
push eax
mov eax, esp
push eax
push formatin
call scanf
add esp, 8
pop eax
mov eax, [-4 + ebp]
mov a(, %eax, 4 ), %eax
mov eax, [-8 + ebp]
mov [-12 + ebp], eax

t131:
mov edx, [-4 + ebp]
add edx, 1
mov [-4 + ebp], edx
jmp t130

t132:
mov esp, ebp
pop ebp
ret

func_1_main:
push ebp
mov ebp, esp
sub esp, 0
mov  eax, 9
push eax
mov 9, eax
call func_1_scan
mov  eax, 0
push eax
mov  ebx, 9
push ebx
mov 0, eax
mov 9, ebx
call func_1_quickSort
mov  eax, 9
push eax
mov 9, eax
call func_1_print
mov esp, ebp
pop ebp
ret
