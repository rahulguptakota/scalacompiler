section .data
message db "Register = %d", 10, 0

 formatin: db "%d", 0
section .text
	global main
extern printf
extern scanf

main:
call func_1_main
mov  eax, 1
int  0x80

func_1_acker:
push ebp
mov ebp, esp
sub esp, 32
cmp [12 + ebp], 0
je t3
mov edx, 0
mov [-4 + ebp], edx
jmp t4

t3:
mov edx, 1
mov [-4 + ebp], edx

t4:
cmp [-4 + ebp], 0
je t9
mov edx, [8 + ebp]
add edx, 1
push edx
mov [-8 + ebp], edx

t9:
cmp [8 + ebp], 0
je t12
mov edx, 0
mov [-12 + ebp], edx
jmp t13

t12:
mov edx, 1
mov [-12 + ebp], edx

t13:
cmp [-12 + ebp], 0
je t23
mov  eax, [-16 + ebp]
push eax
mov  ebx, 1
push ebx
mov [-16 + ebp], eax
mov 1, ebx
call func_1_acker
mov [-20 + ebp], eax
mov  eax, [-20 + ebp]
push eax
mov [-20 + ebp], eax

t23:
mov  eax, [-24 + ebp]
push eax
mov  ebx, [-28 + ebp]
push ebx
mov [-24 + ebp], eax
mov [-28 + ebp], ebx
call func_1_acker
mov [-32 + ebp], eax
mov  eax, [-32 + ebp]
push eax
mov [-32 + ebp], eax
mov esp, ebp
pop ebp
ret

func_1_main:
push ebp
mov ebp, esp
sub esp, 12
mov edx, 0
mov ecx, 0
mov edx, 0
mov [-8 + ebp], ecx
mov [-4 + ebp], edx

t60:
cmp [-4 + ebp], 4
jg t62
mov edx, 0
mov [-8 + ebp], edx

t57:
cmp [-8 + ebp], 10
jg t59
mov  eax, [-4 + ebp]
push eax
mov  ebx, [-8 + ebp]
push ebx
mov [-4 + ebp], eax
mov [-8 + ebp], ebx
call func_1_acker
mov [-12 + ebp], eax
push eax
xor eax, eax
push eax
xor eax, eax
mov eax, [-12 + ebp]
push eax
push message
call printf
add esp, 8
pop eax

t58:
mov edx, [-8 + ebp]
add edx, 1
mov [-8 + ebp], edx
jmp t57

t59:

t61:
mov edx, [-4 + ebp]
add edx, 1
mov [-4 + ebp], edx
jmp t60

t62:
mov esp, ebp
pop ebp
ret
int_to_string:
add esi,9
mov byte [esi],0
mov ebx,10
.next_digit:
xor edx,edx
div ebx
add dl,'0'
dec esi
  mov [esi],dl
test eax,eax
jnz .next_digit
mov eax,esi
ret
