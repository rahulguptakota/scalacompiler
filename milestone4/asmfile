section .data
message db "%d", 10, 0
formatin: db "%d", 0
formatout: db "%d ", 0
formatdouble: db "%lf", 0

str34 db 'Please input for fibonacci:',0
len_str34 equ $ - str34

section .text
	global main
extern printf
extern scanf
extern fopen
extern fscanf
extern fprintf
extern fclose
extern sin
main:
call func_1_main
mov  eax, 1
int  0x80

func_1_fibo:
push ebp
mov ebp, esp
sub esp, 4060
mov edx, 0
lea eax,[-4 + ebp]
sub eax,0
mov ebx,0
mov [eax],ebx
lea ebx,[-4 + ebp]
sub ebx,4
mov ecx,1
mov [ebx],ecx
mov edx, 2
mov [-4008 + ebp], eax
mov [-4012 + ebp], ebx
mov [-4004 + ebp], edx

t34:
mov eax, [-4004 + ebp]
cmp eax,[8 + ebp]
mov [-4004 + ebp], eax
jg t36
mov edx,4
mov eax,[-4004 + ebp]
imul edx
lea ebx,[-4 + ebp]
sub ebx,eax
mov edx, [-4004 + ebp]
sub edx, 1
mov [-4024 + ebp], edx
mov edx,4
mov [-4016 + ebp], eax
mov eax,[-4024 + ebp]
imul edx
lea ecx,[-4 + ebp]
sub ecx,eax
mov ecx, [ecx]
mov edx, [-4004 + ebp]
sub edx, 2
mov [-4036 + ebp], edx
mov edx,4
mov [-4028 + ebp], eax
mov eax,[-4036 + ebp]
imul edx
lea edx,[-4 + ebp]
sub edx,eax
mov edx, [edx]
mov [-4032 + ebp], ecx
mov ecx, [-4032 + ebp]
add ecx, edx
mov [ebx],ecx
mov [-4040 + ebp], eax
mov [-4020 + ebp], ebx
mov [-4048 + ebp], ecx
mov [-4044 + ebp], edx

t35:
mov edx, [-4004 + ebp]
add edx, 1
mov [-4004 + ebp], edx
jmp t34

t36:
mov edx,4
mov eax,[8 + ebp]
imul edx
lea ebx,[-4 + ebp]
sub ebx,eax
mov ebx, [ebx]
mov edx, ebx
mov [-4052 + ebp], eax
mov [-4056 + ebp], ebx
mov [-4060 + ebp], edx
mov eax, [-4060 + ebp]
mov esp, ebp
pop ebp
ret
mov esp, ebp
pop ebp
ret

func_1_main:
push ebp
mov ebp, esp
sub esp, 8
mov edx, 0
push eax
push ebx
push ecx
push edx
mov edx,len_str34
mov ecx,str34
mov ebx,1
mov eax,4
int 0x80
pop edx
pop ecx
pop ebx
pop eax
push eax
mov eax, esp
push eax
push formatin
call scanf
add esp, 8
mov edx, [esp]
pop eax
push edx
mov [-4 + ebp], edx
call func_1_fibo
mov edx, eax
mov [-8 + ebp], eax
push eax
push ebx
push ecx
push edx

xor eax, eax
mov eax, edx
push eax
push message
call printf
add esp, 8
pop edx
pop ecx
pop ebx
pop eax

mov [-4 + ebp], edx
mov esp, ebp
pop ebp
ret
