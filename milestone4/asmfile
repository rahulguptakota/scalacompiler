section .data
<<<<<<< HEAD
<<<<<<< HEAD

 tempbuffer db '          '
=======
a:
	.zero 16
arr:
	.zero 16
=======
>>>>>>> f45d527e7cff98a84cdd90470fbf7bde99c46db2

>>>>>>> 1cd64532d22a6875f709330afd4e3e251fce18c7
section .text
	global _start

_start:
call func_1_main
mov  eax, 1
int  0x80

<<<<<<< HEAD
func_1_add:
push ebp
mov ebp, esp
<<<<<<< HEAD
sub esp, -32
mov edx, 9
mov ecx, 3
mov ebx, 0
mov eax, edx
add eax, ecx
mov [-8 + ebp], edx
mov edx, eax
push eax
xor eax, eax
mov eax, edx
add eax, '0'
mov edx, 1
push eax
mov ecx, esp
mov ebx, 1
mov eax,4
int 0x80
pop eax
pop eax
mov [-20 + ebp], eax
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-24 + ebp], edx
=======
sub esp, -36
mov edx, 10
add edx, 12
mov ecx, edx
mov ebx, 0
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-8 + ebp], edx

t5:
mov edx, 10
add edx, 12
mov ecx, edx
mov ebx, 0
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-8 + ebp], edx
cmp 4, [-16 + ebp]
jle 30
mov edx, 10
add edx, 12
mov ecx, edx
mov ebx, 0
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-8 + ebp], edx
cmp 4, [-16 + ebp]
jle 30
cmp 4, [-16 + ebp]
jle 32
mov edx, 10
add edx, 12
mov ecx, edx
mov ebx, 0
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-8 + ebp], edx
cmp 4, [-16 + ebp]
jle 30
cmp 4, [-16 + ebp]
jle 32
cmp 4, [-16 + ebp]
jle 34
mov edx, 10
add edx, 12
mov ecx, edx
mov ebx, 0
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-8 + ebp], edx
cmp 4, [-16 + ebp]
jle 30
cmp 4, [-16 + ebp]
jle 32
cmp 4, [-16 + ebp]
jle 34
cmp 4, [-16 + ebp]
jle 36

t6:
mov edx, 10
add edx, 12
mov ecx, edx
mov ebx, 0
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-8 + ebp], edx
cmp 4, [-16 + ebp]
jle 30
cmp 4, [-16 + ebp]
jle 32
cmp 4, [-16 + ebp]
jle 34
cmp 4, [-16 + ebp]
jle 36
mov  eax, [-12 + ebp]
pusheax
mov [-12 + ebp], eax
mov esp, ebp
pop ebp
ret

func_1_sub1:
push ebp
mov ebp, esp
sub esp, -16
mov edx, 10
add edx, 12
mov ecx, edx
mov ebx, 0
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-8 + ebp], edx
cmp 4, [-16 + ebp]
jle 30
cmp 4, [-16 + ebp]
jle 32
cmp 4, [-16 + ebp]
jle 34
cmp 4, [-16 + ebp]
jle 36
mov  eax, [-12 + ebp]
pusheax
mov [-12 + ebp], eax
mov esp, ebp
pop ebp
ret
mov  eax, [-8 + ebp]
pusheax
mov [-8 + ebp], eax
mov esp, ebp
pop ebp
ret

func_1_sub2:
push ebp
mov ebp, esp
sub esp, -12
mov edx, 10
add edx, 12
mov ecx, edx
mov ebx, 0
mov [-16 + ebp], ebx
mov [-12 + ebp], ecx
mov [-8 + ebp], edx
cmp 4, [-16 + ebp]
jle 30
cmp 4, [-16 + ebp]
jle 32
cmp 4, [-16 + ebp]
jle 34
cmp 4, [-16 + ebp]
jle 36
mov  eax, [-12 + ebp]
pusheax
mov [-12 + ebp], eax
mov esp, ebp
pop ebp
ret
mov  eax, [-8 + ebp]
pusheax
mov [-8 + ebp], eax
mov esp, ebp
pop ebp
ret
push [-4 + ebp]
push printFormat
call printf
add esp, 8
mov esp, ebp
pop ebp
ret

=======
>>>>>>> f45d527e7cff98a84cdd90470fbf7bde99c46db2
func_1_sub:
push ebp
mov ebp, esp
sub esp, -36
mov edx, [36 + ebp]
sub edx, [32 + ebp]
mov ecx, [28 + ebp]
imul [24 + ebp], ecx
mov ebx, edx
add ebx, ecx
mov eax, ebx
add eax, [20 + ebp]
mov [-4 + ebp], edx
mov edx, [16 + ebp]
imul [12 + ebp], edx
mov [-8 + ebp], ecx
mov ecx, eax
sub ecx, edx
mov [-20 + ebp], edx
mov edx, ecx
add edx, [8 + ebp]
push edx
mov [-16 + ebp], eax
mov [-12 + ebp], ebx
mov [-24 + ebp], ecx
mov [-28 + ebp], edx
mov esp, ebp
pop ebp
ret

func_1_main:
push ebp
mov ebp, esp
sub esp, -16
mov edx, [36 + ebp]
sub edx, [32 + ebp]
mov ecx, [28 + ebp]
imul [24 + ebp], ecx
mov ebx, edx
add ebx, ecx
mov eax, ebx
add eax, [20 + ebp]
mov [-4 + ebp], edx
mov edx, [16 + ebp]
imul [12 + ebp], edx
mov [-8 + ebp], ecx
mov ecx, eax
sub ecx, edx
mov [-20 + ebp], edx
mov edx, ecx
add edx, [8 + ebp]
push edx
mov [-16 + ebp], eax
mov [-12 + ebp], ebx
mov [-24 + ebp], ecx
mov [-28 + ebp], edx
mov esp, ebp
pop ebp
ret
<<<<<<< HEAD
mov eax, 2
mov a(, %eax, 4 ), %eax
mov eax, 10
mov edx, 0
cmp 2, [-12 + ebp]
mov [-8 + ebp], eax
mov [-12 + ebp], edx
je 91
mov eax, 2
mov a(, %eax, 4 ), %eax
mov eax, 10
mov edx, 0
cmp 2, [-12 + ebp]
mov [-8 + ebp], eax
mov [-12 + ebp], edx
je 99
mov eax, 2
mov a(, %eax, 4 ), %eax
mov eax, 10
mov edx, 0
cmp 2, [-12 + ebp]
mov [-8 + ebp], eax
mov [-12 + ebp], edx
je 107
mov eax, 2
mov a(, %eax, 4 ), %eax
mov eax, 10
mov edx, 0
cmp 2, [-12 + ebp]
mov [-8 + ebp], eax
mov [-12 + ebp], edx
je 115
mov eax, [-12 + ebp]
mov a(, %eax, 4 ), %eax
mov eax, 10
mov ebx, [-12 + ebp]
mov args(, %ebx, 4 ), %ebx
mov ebx, [-32 + ebp]
mov edx, 10
mov ecx, 0
pushedx
mov [-24 + ebp], eax
mov [-28 + ebp], ebx
mov [-36 + ebp], ecx
mov [-12 + ebp], edx
call func_1_sub
add esp, 0
mov eax, [-12 + ebp]
mov a(, %eax, 4 ), %eax
mov eax, 10
mov ebx, [-12 + ebp]
mov args(, %ebx, 4 ), %ebx
mov ebx, [-32 + ebp]
mov edx, 10
mov ecx, 0
pushedx
mov [-24 + ebp], eax
mov [-28 + ebp], ebx
mov [-36 + ebp], ecx
mov [-12 + ebp], edx
call func_1_sub
add esp, 0
mov eax, [-12 + ebp]
mov a(, %eax, 4 ), %eax
mov eax, 10
mov ebx, [-12 + ebp]
mov args(, %ebx, 4 ), %ebx
mov ebx, [-32 + ebp]
mov edx, 10
mov ecx, 0
pushedx
mov [-24 + ebp], eax
mov [-28 + ebp], ebx
mov [-36 + ebp], ecx
mov [-12 + ebp], edx
call func_1_sub
add esp, 0
cmp [-44 + ebp], [-36 + ebp]
jle 163
cmp [-44 + ebp], [-36 + ebp]
jle 165
cmp [-44 + ebp], [-36 + ebp]
jle 167
cmp [-44 + ebp], [-36 + ebp]
jle 169
cmp [-44 + ebp], [-36 + ebp]
jle 171
cmp [-44 + ebp], [-36 + ebp]
jle 173
cmp [-44 + ebp], [-36 + ebp]
jle 175
cmp [-44 + ebp], [-36 + ebp]
jle 177
jmp t29
jmp t29
jmp t29
mov edx, 1
mov [-56 + ebp], edx
cmp 10, [-56 + ebp]
jg t33
cmp 10, [-56 + ebp]
jg t33
cmp 10, [-56 + ebp]
jg t33
mov edx, [-56 + ebp]
add edx, 1
mov [-56 + ebp], edx
jmp t31
jmp t34
jmp t36
jmp t36
jmp t36
cmp [-56 + ebp], [-92 + ebp]
je t35
cmp [-56 + ebp], [-92 + ebp]
je t35
cmp [-56 + ebp], [-92 + ebp]
je t35
>>>>>>> 1cd64532d22a6875f709330afd4e3e251fce18c7
mov esp, ebp
pop ebp
ret
int_to_string:
add esi,9
mov byte [esi],0
mov ebx,10
.next_digit:
xor edx,edx
div ebx
add dl,'0'
dec esi
  mov [esi],dl
test eax,eax
jnz .next_digit
mov eax,esi
=======
mov  eax, 1
push eax
mov  ebx, 2
push ebx
mov  ecx, 3
push ecx
mov  edx, 4
push edx
mov 4, edx
mov  edx, 5
push edx
mov 5, edx
mov  edx, 6
push edx
mov 6, edx
mov  edx, 7
push edx
mov 7, edx
mov  edx, 8
push edx
mov 1, eax
mov 2, ebx
mov 3, ecx
mov 8, edx
call func_1_sub
add esp, 32
mov edx, [36 + ebp]
sub edx, [32 + ebp]
mov ecx, [28 + ebp]
imul [24 + ebp], ecx
mov ebx, edx
add ebx, ecx
mov eax, ebx
add eax, [20 + ebp]
mov [-4 + ebp], edx
mov edx, [16 + ebp]
imul [12 + ebp], edx
mov [-8 + ebp], ecx
mov ecx, eax
sub ecx, edx
mov [-20 + ebp], edx
mov edx, ecx
add edx, [8 + ebp]
push edx
mov [-16 + ebp], eax
mov [-12 + ebp], ebx
mov [-24 + ebp], ecx
mov [-28 + ebp], edx
mov esp, ebp
pop ebp
>>>>>>> f45d527e7cff98a84cdd90470fbf7bde99c46db2
ret
mov  eax, 1
push eax
mov  ebx, 2
push ebx
mov  ecx, 3
push ecx
mov  edx, 4
push edx
mov 4, edx
mov  edx, 5
push edx
mov 5, edx
mov  edx, 6
push edx
mov 6, edx
mov  edx, 7
push edx
mov 7, edx
mov  edx, 8
push edx
mov 1, eax
mov 2, ebx
mov 3, ecx
mov 8, edx
call func_1_sub
add esp, 32
mov  eax, 1
push eax
mov  ebx, 2
push ebx
mov  ecx, 3
push ecx
mov  edx, 4
push edx
mov 4, edx
mov  edx, 5
push edx
mov 5, edx
mov  edx, 6
push edx
mov 6, edx
mov  edx, 7
push edx
mov 7, edx
mov  edx, 8
push edx
mov 1, eax
mov 2, ebx
mov 3, ecx
mov 8, edx
call func_1_sub
add esp, 32
