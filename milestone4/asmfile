section .data
message db "Register = %d", 10, 0
formatin: db "%d", 0
n DD 0
t14 DD 0
t15 DD 0
t20 DD 0
t35 DD 0
t32 DD 0
t24 DD 0

section .text
	global main
extern printf
extern scanf

main:
call func_1_main
mov  eax, 1
int  0x80

func_1_acker:
push ebp
mov ebp, esp
sub esp, 8
mov eax,0
mov ebx,[12 + ebp]
cmp ebx,eax
mov [12 + ebp], ebx
je t3
mov edx, 0
end of assign
mov [-4 + ebp], edx
jmp t4

t3:
mov edx, 1
end of assign
mov [-4 + ebp], edx

t4:
mov eax,0
mov ebx,[-4 + ebp]
cmp ebx,eax
mov [-4 + ebp], ebx
je t9
mov edx, [8 + ebp]
add edx, 1
mov [-8 + ebp], edx
mov eax, [-8 + ebp]
mov esp, ebp
pop ebp
ret

t9:
mov eax,0
mov ebx,[8 + ebp]
cmp ebx,eax
mov [8 + ebp], ebx
je t12
mov edx, 0
end of assign
mov t14, edx
jmp t13

t12:
mov edx, 1
end of assign
mov t14, edx

t13:
mov eax,0
mov ebx,t14
cmp ebx,eax
mov t14, ebx
je t23
mov  eax, t15
push eax
mov  ebx, 1
push ebx
mov t15, eax
call func_1_acker
mov t20, eax
mov eax, t20
mov esp, ebp
pop ebp
ret

t23:
mov  eax, t24
push eax
mov  ebx, t32
push ebx
mov t24, eax
mov t32, ebx
call func_1_acker
mov t35, eax
mov eax, t35
mov esp, ebp
pop ebp
ret
mov esp, ebp
pop ebp
ret

func_1_main:
push ebp
mov ebp, esp
sub esp, 8
mov edx, 0
end of assign
mov ecx, 0
end of assign
mov edx, 0
end of assign
mov [8 + ebp], ecx
mov [-4 + ebp], edx

t60:
mov eax,4
mov ebx,[-4 + ebp]
cmp ebx,eax
mov [-4 + ebp], ebx
jg t62
mov edx, 0
end of assign
mov [8 + ebp], edx

t57:
mov eax,10
mov ebx,[8 + ebp]
cmp ebx,eax
mov [8 + ebp], ebx
jg t59
mov  eax, [-4 + ebp]
push eax
mov  ebx, [8 + ebp]
push ebx
mov [-4 + ebp], eax
mov [8 + ebp], ebx
call func_1_acker
push eax
push ebx
push ecx
push edx

xor eax, eax
mov eax, eax
push eax
push message
call printf
add esp, 8
pop edx
pop ecx
pop ebx
pop eax

mov [-8 + ebp], eax

t58:
mov edx, [8 + ebp]
add edx, 1
mov [8 + ebp], edx
jmp t57

t59:

t61:
mov edx, [-4 + ebp]
add edx, 1
mov [-4 + ebp], edx
jmp t60

t62:
mov esp, ebp
pop ebp
ret
